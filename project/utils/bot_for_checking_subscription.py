from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, WebAppInfo, InlineKeyboardMarkup
import asyncio
from datetime import datetime
from project.utils.logger import Logger
from project.config import settings

BOT_TOKEN = settings.BOT_TOKEN
CHANNEL_ID_KAZAN = settings.CHANNEL_ID_KAZAN
CHANNEL_ID_CHELNY = settings.CHANNEL_ID_CHELNY

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –í –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
def format_job_message_html(job_data):
    created_at = job_data.get('created_at', '')
    date = job_data.get('date', '')
    formatted_date_of_creation = format_any_datetime(str(created_at), with_hour=True)
    formatted_date_of_work = format_any_datetime(str(date), with_hour=False)
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"<b>üî® {job_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n\n"
        f"<b>üë§ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {job_data.get('wanted_job', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üèôÔ∏è –ì–æ—Ä–æ–¥:</b> {job_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üìç –ê–¥—Ä–µ—Å:</b> {job_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {job_data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±.\n"
        f"<b>üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {job_data.get('time_start', '')} - {job_data.get('time_end', '')}\n"
        f"<b>‚òÄÔ∏è –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É:</b> {formatted_date_of_work}\n"
        f"<b>‚ùó –í–æ–∑—Ä–∞—Å—Ç:</b> {job_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üßë‚Äçüéì –û–ø—ã—Ç:</b> {job_data.get('xp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üìÉ –û–ø–∏—Å–∞–Ω–∏–µ</b> {job_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
    if job_data.get('car'):
        message += f"<b>üöó –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å:</b> –î–∞\n"
    if job_data.get('is_urgent'):
        message += f"<b>‚ö° –°—Ä–æ—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b> –î–∞\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
    message += f"<b>üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {formatted_date_of_creation}\n\n"

    message += f'<a href="https://t.me/PodrabotaiBot">–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é</a>'

    return message



def format_any_datetime(date_string, with_hour):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ 'DD.MM.YYYY –≤ HH:MM'
    """
    formats_to_try = [
        "%Y-%m-%dT%H:%M:%S.%f",  # ISO —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
        "%Y-%m-%dT%H:%M:%S",  # ISO –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
        "%a, %d %b %Y %H:%M:%S %Z",  # RFC format
        "%Y-%m-%d",  # –ü—Ä–æ—Å—Ç–æ –¥–∞—Ç–∞
    ]

    for fmt in formats_to_try:
        try:
            dt = datetime.strptime(date_string, fmt)
            if with_hour:
                return dt.strftime("%d.%m.%Y –≤ %H:%M")
            else:
                return dt.strftime("%d.%m.%Y")
        except ValueError:
            continue

    return date_string


# async def check_user_subscription(user_id: int) -> bool:
#     try:
#         member = await bot.get_chat_member(
#             chat_id=CHANNEL_ID,
#             user_id=user_id
#         )
#
#         return member.status in [
#             ChatMemberStatus.MEMBER,
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.CREATOR
#         ]
#
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞: {e}")
#         return False

# –í –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
def which_city_send_message(city):
    city = city.lower().strip()
    if city == "–∫–∞–∑–∞–Ω—å":
        return CHANNEL_ID_KAZAN
    elif city == "–Ω–∞–±–µ—Ä–µ–∂–Ω—ã–µ-—á–µ–ª–Ω—ã":
        return CHANNEL_ID_CHELNY
    else:
        Logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥: {city}")
        return None


async def send_to_channel(message_json):
    # –°–æ–∑–¥–∞–µ–º –ù–û–í–û–ì–û –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
    temp_bot = Bot(token=settings.BOT_TOKEN)
    try:

        # web_app_button = InlineKeyboardButton(
        #     text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        #     web_app=WebAppInfo(url="https://app.podrabot.ru/app/"),
        # )
        # keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_button]])

        if not message_json.get("city"):
            Logger.error("–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ message_json")
            return False

        channel_id = which_city_send_message(message_json["city"])
        if not channel_id:
            Logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω channel_id –¥–ª—è –≥–æ—Ä–æ–¥–∞: {message_json['city']}")
            return False

        await temp_bot.send_message(
            chat_id=channel_id,
            text=format_job_message_html(message_json),
            parse_mode="HTML",
            disable_web_page_preview=True
            # reply_markup=keyboard
        )

        await temp_bot.session.close()
        return True

    except Exception as e:
        Logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False
    finally:
        await temp_bot.session.close()


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        me = await bot.get_me()
        print(f"–ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    try:
        await dp.start_polling(bot)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
