from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from project.utils.logger import Logger
from project.config import settings

BOT_TOKEN = settings.BOT_TOKEN
CHANNEL_ID = settings.CHANNEL_ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def format_job_message(job_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ HTML"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    created_at = job_data.get('created_at', '')
    if created_at:
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            formatted_date = dt.strftime("%d.%m.%Y –≤ %H:%M")
        except:
            formatted_date = created_at
    else:
        formatted_date = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"<b>üè¢ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!</b>\n\n"
        f"<b>üìù –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {job_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üë§ –ò—â–µ—Ç:</b> {job_data.get('wanted_job', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {job_data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±.\n"
        f"<b>üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {job_data.get('time_start', '')} - {job_data.get('time_end', '')}\n"
        f"<b>üìç –ê–¥—Ä–µ—Å:</b> {job_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üèôÔ∏è –ì–æ—Ä–æ–¥:</b> {job_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
    if job_data.get('car'):
        message += f"<b>üöó –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å:</b> –î–∞\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É
    message += f"<b>üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {formatted_date}\n"

    return message

async def check_user_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(
            chat_id=CHANNEL_ID,
            user_id=user_id
        )

        return member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False


async def send_to_channel(message_json):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=format_job_message(message_json), parse_mode="HTML")
        return True
    except Exception as e:
        Logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        me = await bot.get_me()
        print(f"–ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    try:
        await dp.start_polling(bot)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ polling: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())